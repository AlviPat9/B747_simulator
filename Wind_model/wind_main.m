classdef wind_main < matlab.System
%% Wind Class
% Wind class created to get the initial values of the different models. It
% is basically a random seed generator for subclasses. It will be inherited
% by all wind phenomena classes to set the input & output of those classes.
    properties
        k = 0.4 % karman constant
    end
    properties (Access = private)
        H0 % surface_roughnes [m]
        V0 % average wind at reference surface [m/s]
        Vg
        d_m
    end
    properties(DiscreteState)
        wind_body_frame
        wind_earth_frame
    end
    methods (Access = protected)
        function setupImpl(obj)
            %% Constructor method for gust model
            % Generate random variable
            min_Vg = 0; % [m/s]
            max_Vg = 50; % [m/s]
            obj.Vg = (max_Vg - min_Vg)*rand + min_Vg;            
            min_thick = 2;
            max_thick = 3;
            obj.d_m = obj.Vg*((max_thick - min_thick)*rand + min_thick);
            %% Setup method for average wind model
            % Initialize properties of the method
            obj.V0 = rand*10;
            obj.H0 = rand/1000;
            % Perform one-time calculations, such as computing constants
            obj.wind_earth_frame = zeros(1,3);
        end
        function wind=stepImpl(obj,altitude)
            %% Step method for wind_main class
            % Once all classes are initially set, the step method from wind
            % main class will launch each calculation needed to compute
            % wind disturbance.
            
            %% Input
            %{
                wind disturbances caused by atmospheric conditions
            %}
            %% Output
            %{
                wind speed -> wind generated by different (body frame and earth frame axis)
                phenomena (disturbance of average wind speed)
            %}

            h = altitude;
            %% Gust model
            if (h<0) || (h>obj.d_m)
                wind_gust = [0 0 0];
            else
                wind_gust = [0 0 (obj.Vg/2)*(1-cos(pi*h/obj.d_m))];
            end
            %% Average wind
            wind_average = [obj.V0/obj.k * log(altitude/obj.H0) 0 0];
            obj.wind_earth_frame = wind_gust + wind_average;% wind_burst + wind_gust + wind_average + wind_turbulence;
            wind = obj.wind_earth_frame;
            
        end
        function resetImpl(obj)
            obj.wind_earth_frame = zeros(3,1);
        end
    end   
end
